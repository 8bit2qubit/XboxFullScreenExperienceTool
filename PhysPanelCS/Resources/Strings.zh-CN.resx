<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>PhysPanelCS {0} - Windows 内部显示器物理尺寸工具</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>用法: PhysPanelCS &lt;命令&gt; [参数...]</value>
  </data>
  <data name="Commands" xml:space="preserve">
    <value>命令:</value>
  </data>
  <data name="GetDescription" xml:space="preserve">
    <value>  get               获取当前的物理尺寸设置。</value>
  </data>
  <data name="SetDescription" xml:space="preserve">
    <value>  set &lt;宽&gt; &lt;高&gt;     设置新的物理尺寸 (单位为毫米)。</value>
  </data>
  <data name="Examples" xml:space="preserve">
    <value>示例:</value>
  </data>
  <data name="GetExample" xml:space="preserve">
    <value>  PhysPanelCS get</value>
  </data>
  <data name="SetExample" xml:space="preserve">
    <value>  PhysPanelCS set 155 87</value>
  </data>
  <data name="ErrorUnknownCommand" xml:space="preserve">
    <value>错误：未知的命令 '{0}'</value>
  </data>
  <data name="ErrorGetFailed" xml:space="preserve">
    <value>错误：无法获取显示器尺寸。</value>
  </data>
  <data name="CurrentSize" xml:space="preserve">
    <value>当前尺寸: {0}x{1}mm ({2:F2}")</value>
  </data>
  <data name="ErrorSetInvalid" xml:space="preserve">
    <value>错误：'set' 命令的参数格式不正确。</value>
  </data>
  <data name="ErrorSetFailed" xml:space="preserve">
    <value>错误：无法设置显示器尺寸。此操作需要以 SYSTEM 用户权限运行。</value>
  </data>
  <data name="SetSuccess" xml:space="preserve">
    <value>设置成功。</value>
  </data>
  <data name="UnknownVersion" xml:space="preserve">
    <value>未知版本</value>
  </data>
  <data name="AttemptingStartKeyboard" xml:space="preserve">
    <value>正在尝试启动触摸键盘...</value>
  </data>
  <data name="KeyboardStartCommandSuccess" xml:space="preserve">
    <value>键盘启动命令已成功发送。</value>
  </data>
  <data name="ErrorFailedToStartKeyboard" xml:space="preserve">
    <value>错误：启动键盘失败。详细信息：{0}</value>
  </data>
  <data name="StartKeyboardDescription" xml:space="preserve">
    <value>  startkeyboard     启动或切换 Windows 触摸键盘。</value>
  </data>
  <data name="StartKeyboardExample" xml:space="preserve">
    <value>  PhysPanelCS.exe startkeyboard</value>
  </data>
  <data name="ErrorNtStatusErrorCode" xml:space="preserve">
    <value>   NTSTATUS 错误码: 0x{0:X8}</value>
  </data>
</root>